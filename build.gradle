apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

ext {
        appName = "AI-Platform"
        gdxVersion = '1.9.1'
        roboVMVersion = '1.8.0'
        //box2DLightsVersion = '1.4'
        //ashleyVersion = '1.6.0'
        //aiVersion = '1.6.0'
    }

repositories {
	mavenCentral()
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
	maven { url "https://oss.sonatype.org/content/repositories/releases/" }
	maven { url "http://neuroph.sourceforge.net/maven2/" }
}

dependencies {
        compile "org.neuroph:neuroph-core:2.9"
        
        compile "org.encog:encog-core:3.3.0"
        compile "com.apple:AppleJavaExtensions:1.4"
}

project.ext.mainClassName = "core.Main"
project.ext.assetsDir = new File("src/main/java/");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}

tasks.eclipse.doLast {
    delete ".project"
}
